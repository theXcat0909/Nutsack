// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  participants  Participant[]
  payments      Payment[]
  wonHunts      Hunt[]     @relation("HuntWinner")
  
  @@map("users")
}

model Hunt {
  id            String    @id @default(cuid())
  title         String
  description   String
  maxParticipants Int?
  entryFee      Float     @default(5.00)
  prizePool     Float     @default(1000.00)
  prizeClaimed  Boolean   @default(false)
  winnerId      String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  participants  Participant[]
  clues         Clue[]
  locations     Location[]
  winner        User?     @relation("HuntWinner", fields: [winnerId], references: [id])
  
  @@map("hunts")
}

model Participant {
  id            String    @id @default(cuid())
  userId        String
  huntId        String
  status        ParticipantStatus @default(REGISTERED)
  progress      Int       @default(0)
  score         Int       @default(0)
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hunt          Hunt      @relation(fields: [huntId], references: [id], onDelete: Cascade)
  progressRecords Progress[]
  
  @@unique([userId, huntId])
  @@map("participants")
}

model Payment {
  id            String    @id @default(cuid())
  userId        String
  amount        Float
  status        PaymentStatus @default(PENDING)
  stripePaymentId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Clue {
  id            String    @id @default(cuid())
  huntId        String
  locationId    String?
  title         String
  description   String
  difficulty    Int       @default(1)
  points        Int       @default(100)
  order         Int
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  hunt          Hunt      @relation(fields: [huntId], references: [id], onDelete: Cascade)
  location      Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  progressRecords Progress[]
  
  @@map("clues")
}

model Location {
  id            String    @id @default(cuid())
  huntId        String
  name          String
  address       String
  latitude      Float
  longitude     Float
  description   String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  hunt          Hunt      @relation(fields: [huntId], references: [id], onDelete: Cascade)
  clues         Clue[]
  
  @@map("locations")
}

model Progress {
  id            String    @id @default(cuid())
  participantId String
  clueId        String
  status        ProgressStatus @default(NOT_STARTED)
  startTime     DateTime?
  completionTime DateTime?
  hintsUsed     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  clue          Clue       @relation(fields: [clueId], references: [id], onDelete: Cascade)
  
  @@unique([participantId, clueId])
  @@map("progress")
}

enum ParticipantStatus {
  REGISTERED
  ACTIVE
  COMPLETED
  DISQUALIFIED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}